---
permalink: /tech/
---

## このページの利用技術について

このページの利用技術をまとめる。

### 方針
- お金をかけない
- 経歴はマークダウンで管理したい(No office系ソフト)

### ジェネレータ

Github pages推奨のjekyllを利用して作成している
ruby製でmarkdownから簡単なサイトを作成できる
ローカルでは以下コマンドで簡易サーバを立ててくれて
ファイルの変更を検知して再ビルドしてくれる（なお、configは再起動が必要）
```
bundle exec jekyll serve
```

### デプロイ

Github pagesの仕組みに乗っかっている。
作成~デプロイまでが一通り揃っているものと
githubアカウントの提出を求められたときに何もアウトプットがないのは寂しいので、このレジュメ作成をかねて使っている。

### バージョン管理

gitを使っている。
実際の業務っぽくコミットを積みたいと思ったので
feature単位でブランチを切って実装後、PRを作成してマージで進めている。
新規ページの追加以外は差分は小さめにした...はず

### リポジトリ

Githubである。
github actionsでgithub pagesを自動でデプロイしてくれるが
お金をかけたくないのでpublicリポジトリで運用している。

他人にforce pushなどでサイトを破壊されたくないので
CODEOWNERSで自分自身をオーナーに設定し、mainブランチへのマージはPull Request必須化 + コードオーナーのapproveが必要な仕組みにしておきつつ、リポジトリの管理者(自分自身)をバイパスルールに追加した。
ページ更新時にはPull Requestを作成し、バイパス権限を使ってマージしている。
(自分自身にmainブランチのpush権限だけを付与すれば良いのではということに書いてて今気づいたが、このままでも特に不便ではないのでこのままにしておく)


### リリース後の所感

経歴をマークダウンで管理できて良いと思ったが、そもそも公開ページなので、自分が関わったPJを詳細に書けないデメリットがある。
やはりプライベートなところにメモで残しておく必要がありそう。 

参考:
- https://docs.github.com/ja/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll
- 